loss = L2, control = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = temp, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = temp, y = y, cuts = cuts,
loss = L2, control = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = temp, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
deltas
delta_loc
base_scale
one_dim
low_loc
x[i,one_dim]
cuts[[one_dim]]
cuts
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
predict_msln = function(one_model, newdata){
sample_size = dim(newdata)[1]
cuts = one_model$cuts
deltas = one_model$deltas
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
base_scale = cumprod(x_num_points)
base_scale = c(1, base_scale)
coef_weight = c(1, deltas[(1+base_scale[dim_x+1]):(dim_x-1+base_scale[dim_x+1])])
coef_weight[coef_weight<0] = 0
y_hat = NULL
for(i in 1:sample_size){
low_loc = NULL
for(one_dim in 1:dim_x){
low_loc = c(low_loc, sum(cuts[[one_dim]] < newdata[i,one_dim]) - 1)
}
for(one_dim in 1:dim_x){
temp_add = c(rep(0,one_dim-1),1,rep(0,dim_x-one_dim))
low_loc = cbind(low_loc, low_loc+temp_add)#'dim' rows and 2^'dim' columns finally
}
delta_loc = 1
distance = 0
for(one_dim in 1:dim_x){#input_delta point locations
delta_loc = delta_loc + base_scale[one_dim]*low_loc[one_dim,]
distance = distance + coef_weight[one_dim]*
(cuts[[one_dim]][low_loc[one_dim,]+1] - newdata[i,one_dim])^2#use Euclid space
}
distance = sqrt(distance) # L2 distance
one_weights = NULL
for(one_point in 1:(2^dim_x)){
one_weights = c(one_weights,prod(distance[-one_point]))
}
one_weights = one_weights/sum(one_weights)
y_hat = c(y_hat, sum(one_weights*deltas[delta_loc]))
}
return(as.numeric(y_hat))
}
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output$rank
AIC(tp2_output)
BIC(tp2_output)
c(1,2,3)>c(3,2,1)
c(1,2,3)>c(3,02,1)
c(1,2,3)>c(3,020,1)
c(1,2,36)>c(3,020,1)
c(1,2,2)>c(3,020,1)
predict_msln = function(one_model, newdata){
sample_size = dim(newdata)[1]
cuts = one_model$cuts
deltas = one_model$deltas
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
base_scale = cumprod(x_num_points)
base_scale = c(1, base_scale)
coef_weight = c(1, deltas[(1+base_scale[dim_x+1]):(dim_x-1+base_scale[dim_x+1])])
coef_weight[coef_weight<0] = 0
y_hat = NULL
for(i in 1:sample_size){
low_loc = NULL
for(one_dim in 1:dim_x){
low_loc = c(low_loc, sum(cuts[[one_dim]] < newdata[i,one_dim]) - 1)
#for points out of boundary:
low_loc[low_loc<0] = 0
low_loc[low_loc>x_num_points-1] = x_num_points[low_loc>x_num_points-1] - 1
}
for(one_dim in 1:dim_x){
temp_add = c(rep(0,one_dim-1),1,rep(0,dim_x-one_dim))
low_loc = cbind(low_loc, low_loc+temp_add)#'dim' rows and 2^'dim' columns finally
}
delta_loc = 1
distance = 0
for(one_dim in 1:dim_x){#input_delta point locations
delta_loc = delta_loc + base_scale[one_dim]*low_loc[one_dim,]
distance = distance + coef_weight[one_dim]*
(cuts[[one_dim]][low_loc[one_dim,]+1] - newdata[i,one_dim])^2#use Euclid space
}
distance = sqrt(distance) # L2 distance
one_weights = NULL
for(one_point in 1:(2^dim_x)){
one_weights = c(one_weights,prod(distance[-one_point]))
}
one_weights = one_weights/sum(one_weights)
y_hat = c(y_hat, sum(one_weights*deltas[delta_loc]))
}
return(as.numeric(y_hat))
}
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
mean(y)
msl_network = function(x, y, cuts,
init_deltas = NULL, iter_ctrl = NULL,
loss = L2, lower = NULL){
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
if(is.null(init_deltas)){
init_deltas = as.numeric(c(rep(mean(y),prod(x_num_points)), rep(1,dim_x-1)))
}
if(is.null(lower)){
lower = as.numeric(c(rep(-Inf,prod(x_num_points)), rep(0,dim_x-1)))
}
if(is.null(iter_ctrl)){
iter_ctrl = list(iter.max = 120, eval.max = 200, trace = 40)
}
temp_outcome = nlminb(init_deltas, multi_sum_loss, x = x, y = y, cuts = cuts,
loss = loss, control = iter_ctrl, lower = lower)
message(temp_outcome$message)
temp_output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts)
y_hat = predict_msln(temp_output, x)
output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts,
fitted_values = y_hat,
residuals = as.numeric(y-y_hat),
rank = length(deltas),
loss = temp_outcome$objective,
convergence_status = temp_outcome$convergence,
iterations = temp_outcome$iterations)
attributes(output)$class = 'lm'
return(output)
}
predict_msln = function(one_model, newdata){
sample_size = dim(newdata)[1]
cuts = one_model$cuts
deltas = one_model$deltas
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
base_scale = cumprod(x_num_points)
base_scale = c(1, base_scale)
coef_weight = c(1, deltas[(1+base_scale[dim_x+1]):(dim_x-1+base_scale[dim_x+1])])
coef_weight[coef_weight<0] = 0
y_hat = NULL
for(i in 1:sample_size){
low_loc = NULL
for(one_dim in 1:dim_x){
low_loc = c(low_loc, sum(cuts[[one_dim]] < newdata[i,one_dim]) - 1)
}
#for points out of boundary:
low_loc[low_loc<0] = 0
low_loc[low_loc>x_num_points-1] = x_num_points[low_loc>x_num_points-1] - 1
for(one_dim in 1:dim_x){
temp_add = c(rep(0,one_dim-1),1,rep(0,dim_x-one_dim))
low_loc = cbind(low_loc, low_loc+temp_add)#'dim' rows and 2^'dim' columns finally
}
delta_loc = 1
distance = 0
for(one_dim in 1:dim_x){#input_delta point locations
delta_loc = delta_loc + base_scale[one_dim]*low_loc[one_dim,]
distance = distance + coef_weight[one_dim]*
(cuts[[one_dim]][low_loc[one_dim,]+1] - newdata[i,one_dim])^2#use Euclid space
}
distance = sqrt(distance) # L2 distance
one_weights = NULL
for(one_point in 1:(2^dim_x)){
one_weights = c(one_weights,prod(distance[-one_point]))
}
one_weights = one_weights/sum(one_weights)
y_hat = c(y_hat, sum(one_weights*deltas[delta_loc]))
}
return(as.numeric(y_hat))
}
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=4, eval.max = 45,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=40, eval.max = 85,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
msl_network = function(x, y, cuts,
init_deltas = NULL, iter_ctrl = NULL,
loss = L2, lower = NULL){
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
if(is.null(init_deltas)){
init_deltas = as.numeric(c(rep(mean(y),prod(x_num_points)), rep(0.5,dim_x-1)))
}
if(is.null(lower)){
lower = as.numeric(c(rep(-Inf,prod(x_num_points)), rep(0,dim_x-1)))
}
if(is.null(iter_ctrl)){
iter_ctrl = list(iter.max = 120, eval.max = 200, trace = 40)
}
temp_outcome = nlminb(init_deltas, multi_sum_loss, x = x, y = y, cuts = cuts,
loss = loss, control = iter_ctrl, lower = lower)
message(temp_outcome$message)
temp_output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts)
y_hat = predict_msln(temp_output, x)
output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts,
fitted_values = y_hat,
residuals = as.numeric(y-y_hat),
rank = length(deltas),
loss = temp_outcome$objective,
convergence_status = temp_outcome$convergence,
iterations = temp_outcome$iterations)
attributes(output)$class = 'lm'
return(output)
}
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L2, iter_ctrl = list(iter.max=40, eval.max = 85,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L1, iter_ctrl = list(iter.max=40, eval.max = 85,
trace = 1, abs.tol = 1e-20), lower = c(rep(-Inf,140),0,0))
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L1, iter_ctrl = list(iter.max=4, trace = 1))
#' @return a model of multivariate segmented linear network
#' @export
#'
#' @examples
#' temp = data_generator(1000,55,gen_type = 'chaos&cut')
#' y = temp[,2]
#' one_trial = temp[,-2]
#' cuts = list(c(-2,4,8,12,21),c(-10,3,16,30),c(0,33,67,100))
#' output = msl_network(x = one_trial, y = y, cuts = cuts,
#'     loss = L1, iter_ctrl = list(iter.max=4, trace = 1))
msl_network = function(x, y, cuts,
init_deltas = NULL, iter_ctrl = NULL,
loss = L2, params = NULL, lower = NULL){
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
if(is.null(init_deltas)){
init_deltas = as.numeric(c(rep(mean(y),prod(x_num_points)), rep(0.5,dim_x-1)))
}
if(is.null(lower)){
lower = as.numeric(c(rep(-Inf,prod(x_num_points)), rep(0,dim_x-1)))
}
if(is.null(iter_ctrl)){
iter_ctrl = list(iter.max = 120, eval.max = 200, trace = 40)
}
temp_outcome = nlminb(init_deltas, multi_sum_loss, x = x, y = y, cuts = cuts,
loss = loss, control = iter_ctrl, lower = lower)
message(temp_outcome$message)
temp_output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts)
y_hat = predict_msln(temp_output, x)
output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts,
fitted_values = y_hat,
residuals = as.numeric(y-y_hat),
rank = length(deltas),
loss = temp_outcome$objective,
convergence_status = temp_outcome$convergence,
iterations = temp_outcome$iterations)
attributes(output)$class = 'lm'
return(output)
}
tp2_output = msl_network(x = one_trial, y = y, cuts = cuts,
loss = L1, iter_ctrl = list(iter.max=4, trace = 1))
predict_msln(tp2_output,one_trial)
predict_msln(tp2_output,one_trial)[1:5]
devtools::build()
install.packages("D:/DATA/个人项目/slmwclf/slmwclf_0.1.2.tar.gz", repos = NULL, type = "source")
remove.packages(slmwclf)
remove.packages('slmwclf')
install.packages("D:/DATA/个人项目/slmwclf/slmwclf_0.1.2.tar.gz", repos = NULL, type = "source")
devtools::build()
install.packages("D:/DATA/个人项目/slmwclf/slmwclf_0.1.2.tar.gz", repos = NULL, type = "source")
library(slmwclf)
library(roxygen2)
roxygenize()
devtools::load_all()
library(roxygen2)
roxygenize()
rm(.)
rm(msl_network,multi_sum_loss,predict_model)
devtools::load_all()
rm(SLM_construct,predict_msln)
devtools::load_all()
library(roxygen2)
roxygenize()
devtools::build()
devtools::check()
#' @return a model of multivariate segmented linear network
#' @export
#'
#' @examples
#' temp = data_generator(1000,55,gen_type = 'chaos&cut')
#' y = temp[,2]
#' one_trial = temp[,-2]
#' cuts = list(c(-2,4,8,12,21),c(-10,3,16,30),c(0,33,67,100))
#' output = msl_network(x = one_trial, y = y, cuts = cuts,
#'     loss = L1, iter_ctrl = list(iter.max=4, trace = 1))
msl_network = function(x, y, cuts,
init_deltas = NULL, iter_ctrl = NULL,
loss = L2, params = NULL, lower = NULL){
dim_x = length(cuts)
x_num_points = NULL
for(i in 1:dim_x){
x_num_points = c(x_num_points, length(cuts[[i]]))
}
if(is.null(init_deltas)){
init_deltas = as.numeric(c(rep(mean(y),prod(x_num_points)), rep(0.5,dim_x-1)))
}
if(is.null(lower)){
lower = as.numeric(c(rep(-Inf,prod(x_num_points)), rep(0,dim_x-1)))
}
if(is.null(iter_ctrl)){
iter_ctrl = list(iter.max = 120, eval.max = 200, trace = 40)
}
temp_outcome = nlminb(init_deltas, multi_sum_loss, x = x, y = y, cuts = cuts,
loss = loss, control = iter_ctrl, lower = lower)
message(temp_outcome$message)
temp_output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts)
y_hat = predict_msln(temp_output, x)
output = list(deltas = temp_outcome$par,
dim_x = dim_x,
cuts = cuts,
fitted_values = y_hat,
residuals = as.numeric(y-y_hat),
rank = length(init_deltas),
loss = temp_outcome$objective,
convergence_status = temp_outcome$convergence,
iterations = temp_outcome$iterations)
attributes(output)$class = 'lm'
return(output)
}
devtools::check()
devtools::build()
plot(1,1)
devtools::load_all()
draw_lines_model(model_1)
draw_lines_model
#' @return 0
#' @export
#'
#' @examples
#' temp = data_generator(1000,55,gen_type = 'chaos&cut')
#' model_1 = SLM_construct(temp[,1],temp[,2],fixed_psi = c(2,6,8,10))
#' dev.off()
#' draw_lines_model(model_1,'red')
#' plot(temp[,1],temp[,2])
#' draw_lines_model(model_1,'red')
draw_lines_model = function(one_model, model_col = 'blue',
x_beg = -100, x_end = 100){
x = c(x_beg, one_model$x, x_end)
y = predict_model(one_model, c(x_beg,x_end))
y = c(y[1], one_model$y, y[2])
err = tryCatch({lines(x,y,col = model_col)},error = function(e){(e)})
if(typeof(err) == 'list'){
if(err[[1]] == 'plot.new has not been called yet'){
message('Draw new line failed. Note that this function adds a new line under an EXISTING plot.')
}
}
return()
}
draw_lines_model
draw_lines_model(model_1)
#' @return 0
#' @export
#'
#' @examples
#' temp = data_generator(1000,55,gen_type = 'chaos&cut')
#' model_1 = SLM_construct(temp[,1],temp[,2],fixed_psi = c(2,6,8,10))
#' dev.off()
#' draw_lines_model(model_1,'red')
#' plot(temp[,1],temp[,2])
#' draw_lines_model(model_1,'red')
draw_lines_model = function(one_model, model_col = 'blue',
x_beg = -100, x_end = 100){
x = c(x_beg, one_model$x, x_end)
y = predict_model(one_model, c(x_beg,x_end))
y = c(y[1], one_model$y, y[2])
err = tryCatch({lines(x,y,col = model_col)},error = function(e){(e)})
if(typeof(err) == 'list'){
if(err[[1]] == 'plot.new has not been called yet'){
message('Draw new line failed. Note that this function adds a new line under an EXISTING plot.')
}
}
}
draw_lines_model(model_1)
devtools::build()
View(model_1)
devtools::load_all()
SLM_construct(temp[,1,2])
SLM_construct(temp[,c(1,3)],temp[,2],c(2,6,8,10))
SLM_construct(temp[,c(1,3,4)],temp[,2],c(2,6,8,10))
names(temp)
names(temp[,1])
names(temp[,-c(1,2,3)])
dimnames(temp[,-c(1,2,3)])
dimnames(temp[,-c(1,3)])
dim(temp[,-c(1,3)])
dim(temp[,-c(1,3,4)])
paste('indep_var[-1]',collapse = '+')
#'
#' @return a list with segmented location, corresponding y_hat, tangents and total loss
#' @export
#'
#' @examples
#' temp = data_generator(1000,55,gen_type = 'chaos&cut')
#' one_model = SLM_construct(temp[,1],temp[,2],fixed_psi = c(2,6,8,10))#single input
#' one_model$x
#' one_model$y
#' AIC(SLM_construct(temp[,c(1,3,4)],temp[,2],fixed_psi = c(2,6,8,10)))#multi input
SLM_construct = function(x, y, fixed_psi,
loss_function = L2, params = NULL, init_val = NULL){
n_fixed_psi = length(fixed_psi)
x_copy = x
if(is.null(init_val)){
init_val = rep(mean(y),n_fixed_psi)
init_val = c(init_val,0,0)
}
multi_input = FALSE
minor_fit = NULL
x_others = NULL
if(dim(as.data.frame(x))[2] > 1){#multi input
multi_input = TRUE
x = as.data.frame(x)
x_others = cbind(y,x)#for minor_fit
x = x[,1]
# construct formula in the second stage
indep_var = dimnames(x_others)[[2]][-2]
secondary_formula = paste(indep_var[-1],collapse = '+')
secondary_formula = as.formula(paste(indep_var[1],secondary_formula,sep='~'))
}
output = nlminb(init_val,sum_loss, x=x,y=y,
cuts=fixed_psi,loss=loss_function, params = params)
if(output$convergence){
warning('warning: nlminb not converge')
}
temp_outcome = list(x = fixed_psi,
y = output$par[1:n_fixed_psi],
init_tangent = output$par[n_fixed_psi+1],
final_tangent = output$par[n_fixed_psi+2],
minor_fit = NULL,
mainloss = output$objective)
if(multi_input){
x_others[,1] = x_others[,1] - predict_model(temp_outcome, newdata = x)
minor_fit = lm(secondary_formula, data = x_others)
}
temp_outcome = list(x = fixed_psi,
y = output$par[1:n_fixed_psi],
init_tangent = output$par[n_fixed_psi+1],
final_tangent = output$par[n_fixed_psi+2],
minor_fit = minor_fit,
mainloss = output$objective)
#for compatibility of information criterion method e.g. AIC()
y_hat = predict_model(temp_outcome, newdata = x_copy)
n_rank = n_fixed_psi + 2
if(multi_input){
n_rank = n_rank + minor_fit$rank
}
output = list(x = fixed_psi,
y = output$par[1:n_fixed_psi],
init_tangent = output$par[n_fixed_psi+1],
final_tangent = output$par[n_fixed_psi+2],
minor_fit = minor_fit,
mainloss = output$objective,
residuals = as.numeric(y-y_hat),
rank = n_rank)
attributes(output)$class = 'lm'
return(output)
}
SLM_construct(temp[,c(1,3,4)],temp[,2],c(2,6,8,10))
SLM_construct(temp[,c(1,3,4)],temp[,2],c(2,6,8,10))$y
SLM_construct(temp[,c(1,3)],temp[,2],c(2,6,8,10))$y
SLM_construct(temp[,c(1,3)],temp[,2],c(2,6,8,10))$minor_fit
SLM_construct(temp[,c(1,3,4)],temp[,2],c(2,6,8,10))$minor_fit
SLM_construct(temp[,1],temp[,2],c(2,6,8,10))$minor_fit
devtools::build()
devtools::check()
